#include "../common/stdlib.fc";

global slice storage::bridge_address;
global slice storage::jetton_address;
global slice storage::jetton_pool_wallet_address;
global int storage::liquidity;
;; daily_limit is HashMap with `target_chain_id+(receipt:0,swap:1)` int key (256 cell_hash()),value is `cell {remaining_token_amount,last_refresh_time,daily_limit}`
global cell storage::daily_limit;
;; rate_limit is HashMap with `target_chain_id+(receipt:0,swap:1)` int key,value is `cell {current_token_amount,last_updated_time,token_capacity,is_enabled,rate}`
global cell storage::rate_limit;
global cell storage::pool_liquidity_account_code;
global slice storage::admin;
global slice storage::owner;
global cell storage::temp_upgrade;
;; record aelf -> ton
;; `swap_dic` is HashMap with `swap_id_hash` int key, value is `from_chain_id:int;origin_share:int;target_share:int;swapped_amount:int;swapped_times:int`
global cell storage::swap_dic;
;; record ton -> aelf
;; `receipt_dic` is HashMap with `target_chain_id` int key, value is `index:int;total_amount:int`
global cell storage::receipt_dic;
global cell storage::receipt_owner_tmp_dic;

() load_storage() impure inline {
    slice ds = get_data().begin_parse();
    storage::liquidity = ds~load_uint(256);
    cell ds_0 = ds~load_ref(); slice ds_0_slice = ds_0.begin_parse();
    storage::daily_limit = ds_0_slice~load_dict();
    storage::rate_limit = ds_0_slice~load_dict();
    cell ds_1 = ds~load_ref(); slice ds_1_slice = ds_1.begin_parse();
    storage::bridge_address = ds_1_slice~load_msg_addr();
    cell ds_1_0 = ds_1_slice~load_ref(); slice ds_1_0_slice = ds_1_0.begin_parse();
    storage::jetton_address = ds_1_0_slice~load_msg_addr();
    storage::jetton_pool_wallet_address = ds_1_0_slice~load_msg_addr();
    cell ds_2 = ds~load_ref(); slice ds_2_slice = ds_2.begin_parse();
    storage::swap_dic = ds_2_slice~load_dict();
    storage::receipt_dic = ds_2_slice~load_dict();
    storage::receipt_owner_tmp_dic = ds_2_slice~load_dict();
    cell ds_3 = ds~load_ref(); slice ds_3_slice = ds_3.begin_parse();
    storage::pool_liquidity_account_code = ds_3_slice~load_ref();
    storage::admin = ds_3_slice~load_msg_addr();
    storage::owner = ds_3_slice~load_msg_addr();
    storage::temp_upgrade = ds_3_slice~load_ref();
}

() save_storage() impure inline {
    set_data(begin_cell()
        .store_uint(storage::liquidity, 256)
        .store_ref(begin_cell()
            .store_dict(storage::daily_limit)
            .store_dict(storage::rate_limit)
            .end_cell())
        .store_ref(begin_cell()
            .store_slice(storage::bridge_address)
            .store_ref(begin_cell()
                .store_slice(storage::jetton_address)
                .store_slice(storage::jetton_pool_wallet_address)
                .end_cell())
            .end_cell())
        .store_ref(begin_cell()
            .store_dict(storage::swap_dic)
            .store_dict(storage::receipt_dic)
            .store_dict(storage::receipt_owner_tmp_dic)
            .end_cell())
        .store_ref(begin_cell()
            .store_ref(storage::pool_liquidity_account_code)
            .store_slice(storage::admin)
            .store_slice(storage::owner)
            .store_ref(storage::temp_upgrade)
            .end_cell())
        .end_cell());
}