#include "common/stdlib.fc";
#include "common/utils.fc";
#include "multisign/order/storage.fc";
#include "multisign/errors.fc";
#include "multisign/op.fc";
#include "multisign/order/helper.fc";
#include "multisign/order/get.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    var cs = in_msg_full.begin_parse();
    var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool

    slice sender_address = cs~load_msg_addr();

    load_storage();

    if (flags & 1) {
        return ();
    }
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins();

    force_chain(WORKCHAIN, sender_address, error::wrong_workchain);
    (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    if (op == init) {
        throw_unless(error::unauthorized_init, equal_slice_bits(sender_address, storage::multisig_address));
        storage::threshold = in_msg_body~load_index();
        storage::sent_for_execution = false;
        storage::signers_info = in_msg_body~load_nonempty_dict();
        storage::approvals_mask = 0;
        storage::approvals_num = 0;
        storage::expiration_time = in_msg_body~load_timestamp();
        throw_unless(error::expired, storage::expiration_time >= now());
        storage::order = in_msg_body~load_ref();
        save_storage();
        return ();
    }
    if (op == approve) {
        int signer_index = in_msg_body~load_index();
        in_msg_body.end_parse();
        (slice signer_address, int found?) = storage::signers_info.udict_get?(INDEX_SIZE, signer_index);
        throw_unless(error::unauthorized_sign, found?);
        throw_unless(error::unauthorized_sign, equal_slice_bits(sender_address, signer_address));

        _approve(signer_index, sender_address, query_id);
        return ();
    }
    throw(error::unknown_op);
}

